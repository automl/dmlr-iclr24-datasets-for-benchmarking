""" 
This file contains the custom task suites used in the experiments.
"""
from __future__ import annotations

from typing import Tuple

import openml

# define custom task studies here
CUSTOM_SUITES = {
    "agarwal-neurips21a": [361631],
    "arik-aaai20a": [361555, 361633, 361694],
    "bahri-iclr22a": [
        361481,
        361482,
        361483,
        361484,
        361485,
        361486,
        361487,
        361488,
        361489,
        361490,
        361491,
        361492,
        361493,
        361494,
        361495,
        361503,
        361496,
        361497,
        361498,
        361499,
        361500,
        361501,
        361502,
        361505,
        361504,
        361506,
        361507,
        361509,
        361510,
        361511,
        361512,
        361513,
        361514,
        361521,
        361528,
        361529,
        361526,
        361527,
        361532,
        361534,
        361522,
        361523,
        361524,
        361525,
        361518,
        361519,
        361520,
        361517,
        361515,
        361516,
        361530,
        361533,
        361531,
        361535,
        361547,
        361536,
        361537,
        361551,
        361552,
        361548,
        361538,
        361542,
        361550,
        361544,
        361539,
        361543,
        361540,
        361541,
        361546,
    ],
    "bischl-neuripsdbt21a": [
        361481,
        361482,
        361483,
        361484,
        361485,
        361486,
        361487,
        361488,
        361489,
        361490,
        361491,
        361492,
        361493,
        361494,
        361495,
        361503,
        361496,
        361497,
        361498,
        361499,
        361500,
        361501,
        361502,
        361505,
        361504,
        361506,
        361507,
        361508,
        361509,
        361510,
        361511,
        361512,
        361513,
        361514,
        361532,
        361528,
        361529,
        361526,
        361527,
        361534,
        361522,
        361523,
        361524,
        361525,
        361518,
        361519,
        361520,
        361521,
        361517,
        361515,
        361516,
        361530,
        361533,
        361531,
        361535,
        361547,
        361536,
        361537,
        361551,
        361552,
        361548,
        361549,
        361538,
        361542,
        361550,
        361544,
        361539,
        361541,
        361543,
        361540,
        361545,
        361546,
    ],
    "borisov-iclr23a": [361503, 361650, 361649, 361515, 361651],
    "borisov-tnnls22a": [361649, 361653, 361555, 361694],
    "chen-aaai22a": [361637, 361555, 361695],
    "dubey-neurips22a": [361649, 361555, 361631, 361652, 361694, 361695],
    "gijsbers-arxiv22a": [
        361481,
        361484,
        361490,
        361493,
        361499,
        361553,
        361502,
        361509,
        361513,
        361554,
        361562,
        361556,
        361532,
        361529,
        361526,
        361527,
        361524,
        361525,
        361518,
        361519,
        361572,
        361515,
        361555,
        361516,
        361577,
        361530,
        361533,
        361571,
        361547,
        361575,
        361537,
        361551,
        361581,
        361552,
        361576,
        361542,
        361550,
        361557,
        361539,
        361541,
        361543,
        361545,
        361546,
        361558,
        361574,
        361561,
        361566,
        361567,
        361573,
        361564,
        361584,
        361568,
        361569,
        361565,
        361582,
        361583,
        361585,
        361559,
        361560,
        361580,
        361579,
        361563,
        361570,
        361578,
        361588,
        361586,
        361587,
        361590,
        361589,
        361591,
        361592,
    ],
    "gorishniy-neurips21a": [361515, 361578, 361570, 361629, 361630, 361555, 361695],
    "gorishniy-neurips22a": [361533, 361638, 361515, 361640, 361629, 361680, 361555],
    "grinsztajn-neuripsdbt22a": [
        361601,
        361602,
        361603,
        361604,
        361605,
        361606,
        361613,
        361612,
        361608,
        361609,
        361610,
        361611,
        361600,
        361614,
        361593,
        361594,
        361595,
        361596,
        361599,
        361597,
        361598,
    ],
    "hollmann-iclr23a": [
        361483,
        361485,
        361486,
        361487,
        361488,
        361489,
        361490,
        361492,
        361493,
        361495,
        361498,
        361499,
        361502,
        361506,
        361507,
        361509,
        361510,
        361512,
        361514,
        361528,
        361529,
        361522,
        361519,
        361517,
        361531,
        361535,
        361538,
        361542,
        361539,
        361540,
    ],
    "huang-arxiv20a": [
        361679,
        361564,
        361532,
        361682,
        361674,
        361560,
        361681,
        361677,
        361678,
        361570,
        361561,
        361672,
        361567,
        361519,
        361673,
        361638,
        361496,
        361573,
        361579,
    ],
    "joseph-arxiv22a": [361658, 361659, 361555],
    "kadra-neurips21a": [
        361624,
        361481,
        361625,
        361484,
        361493,
        361499,
        361513,
        361515,
        361626,
        361518,
        361627,
        361628,
        361524,
        361526,
        361529,
        361532,
        361537,
        361581,
        361629,
        361557,
        361542,
        361543,
        361545,
        361546,
        361547,
        361548,
        361578,
        361570,
        361579,
        361584,
        361558,
        361574,
        361559,
        361560,
        361561,
        361573,
        361563,
        361630,
        361631,
        361632,
    ],
    "kossen-neurips21a": [361633, 361555, 361634, 361585, 361635, 361694],
    "kotelnikov-openreview23a": [361515, 361637, 361638, 361639, 361495, 361533, 361629, 361584, 361541],
    "popov-iclr20a": [361694, 361695],
    "radenovic-neurips22a": [361649, 361555, 361631, 361694, 361695],
    "rubachev-openreview23a": [361533, 361638, 361640, 361629, 361515, 361555],
    "sarkar-isa22a": [361643, 361635, 361644, 361495, 361491, 361493],
    "schaefl-openreview22a": [
        361663,
        361664,
        361665,
        361635,
        361671,
        361666,
        361667,
        361668,
        361669,
        361662,
        361670,
        361531,
        361492,
        361529,
        361660,
    ],
    "shwartz-ziv-if22a": [361533, 361657, 361656, 361555, 361648, 361638, 361682, 361693, 361694],
    "somepalli-openreview22a": [
        361493,
        361496,
        361641,
        361554,
        361525,
        361519,
        361515,
        361516,
        361682,
        361586,
        361502,
        361555,
        361571,
        361646,
        361581,
        361647,
        361542,
        361579,
        361578,
        361587,
    ],
    "sun-cvprw19a": [361643, 361644, 361515, 361648],
    "yoon-neurips20a": [361515, 361508],
    # "new_datasets": [361693, 361694, 361695],  # temp key for new datasets since no splits will be available
}

COLLECTION_KEYS = list(CUSTOM_SUITES.keys())


def get_final_unique_task_ids(
    collections: dict[str, list[int]],
) -> Tuple[list[int], list[int], list[int]]:
    """Get the final unique task ids."""
    unique_task_ids: list[dict[str, int]] = []
    unique_dataset_ids = []
    numerical_task_ids = []
    categorical_task_ids = []
    for collection in collections.values():
        for task_id in collection:
            task = openml.tasks.get_task(task_id, download_data=False)
            dataset = openml.datasets.get_dataset(task.dataset_id, download_data=False)
            if task.dataset_id not in unique_dataset_ids:
                unique_dataset_ids.append(task.dataset_id)
                unique_task_ids.append(
                    {
                        "task_id": task_id,
                        "n_rows": dataset.qualities["NumberOfInstances"],
                        "n_cols": dataset.qualities["NumberOfFeatures"],
                    }
                )
                if dataset.qualities["NumberOfSymbolicFeatures"] > 1:
                    categorical_task_ids.append(task_id)
                else:
                    numerical_task_ids.append(task_id)
    # sort by number of rows x number of columns
    unique_task_ids = sorted(unique_task_ids, key=lambda x: x["n_rows"] * x["n_cols"])
    final_task_ids = [x["task_id"] for x in unique_task_ids]
    return final_task_ids, numerical_task_ids, categorical_task_ids


final_collection, numerical_task_ids, categorical_task_ids = get_final_unique_task_ids(CUSTOM_SUITES)
CUSTOM_SUITES["all_datasets"] = final_collection
CUSTOM_SUITES["num_datasets"] = numerical_task_ids
CUSTOM_SUITES["cat_datasets"] = categorical_task_ids

# add the unpreprocessed grin datasets to the custom suites
CUSTOM_SUITES["grinsztajn-neuripsdbt22a_unpreprocessed"] = [
    361500,
    361516,
    361532,
    361555,
    361564,
    361570,
    361571,
    361584,
    361639,
    361591,
    361639,
    361656,
    361683,
    361684,
    361685,
    361686,
    361687,
    # 361688,
    361689,
    361690,
]


grinupreprocessed_data_id_to_task_id = {
    151: 361500,
    293: 361683,
    722: 361684,
    821: 361685,
    1120: 361686,
    1461: 361532,
    4134: 361516,
    41150: 361584,
    42477: 361639,
    42769: 361591,
    1044: 361656,
    4541: 361571,
    41168: 361570,
    1596: 361555,
    41147: 361564,
    42192: 361687,
    42803: 361688,
}
